package com.bidhee.nagariknews.nagarikdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bidhee.nagariknews.nagarikdb.News;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NEWS.
*/
public class NewsDao extends AbstractDao<News, Long> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NewsId = new Property(1, String.class, "newsId", false, "NEWS_ID");
        public final static Property NewsCategory = new Property(2, String.class, "newsCategory", false, "NEWS_CATEGORY");
        public final static Property NewsTitle = new Property(3, String.class, "newsTitle", false, "NEWS_TITLE");
        public final static Property NewsDesc = new Property(4, String.class, "newsDesc", false, "NEWS_DESC");
        public final static Property NewsDate = new Property(5, String.class, "newsDate", false, "NEWS_DATE");
        public final static Property NewsImage = new Property(6, String.class, "newsImage", false, "NEWS_IMAGE");
        public final static Property ReportedBy = new Property(7, String.class, "reportedBy", false, "REPORTED_BY");
    };


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NEWS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NEWS_ID' TEXT," + // 1: newsId
                "'NEWS_CATEGORY' TEXT," + // 2: newsCategory
                "'NEWS_TITLE' TEXT," + // 3: newsTitle
                "'NEWS_DESC' TEXT," + // 4: newsDesc
                "'NEWS_DATE' TEXT," + // 5: newsDate
                "'NEWS_IMAGE' TEXT," + // 6: newsImage
                "'REPORTED_BY' TEXT);"); // 7: reportedBy
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEWS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String newsId = entity.getNewsId();
        if (newsId != null) {
            stmt.bindString(2, newsId);
        }
 
        String newsCategory = entity.getNewsCategory();
        if (newsCategory != null) {
            stmt.bindString(3, newsCategory);
        }
 
        String newsTitle = entity.getNewsTitle();
        if (newsTitle != null) {
            stmt.bindString(4, newsTitle);
        }
 
        String newsDesc = entity.getNewsDesc();
        if (newsDesc != null) {
            stmt.bindString(5, newsDesc);
        }
 
        String newsDate = entity.getNewsDate();
        if (newsDate != null) {
            stmt.bindString(6, newsDate);
        }
 
        String newsImage = entity.getNewsImage();
        if (newsImage != null) {
            stmt.bindString(7, newsImage);
        }
 
        String reportedBy = entity.getReportedBy();
        if (reportedBy != null) {
            stmt.bindString(8, reportedBy);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // newsId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // newsCategory
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // newsTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // newsDesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // newsDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // newsImage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // reportedBy
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNewsCategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNewsTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNewsDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNewsDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNewsImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReportedBy(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(News entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(News entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
